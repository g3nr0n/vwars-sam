service: vwars

frameworkVersion: '3'

plugins:
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  stage: "${opt:stage, 'local'}"
  region: us-west-2
  runtime: nodejs16.x
  environment: ${file(resources/env.${self:provider.stage}.json)}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
       - dynamodb:Query
       - dynamodb:Scan
       - dynamodb:GetItem
       - dynamodb:PutItem
       - dynamodb:UpdateItem
       - dynamodb:DeleteItem
      Resource:
        Fn::GetAtt:
          - vwarsTable
          - Arn	
    - Effect: "Allow"
      Action:
       - sqs:*
      Resource:
        Fn::GetAtt:
          - vwarsTaskQueue
          - Arn

package:
  patterns:
    - '!node_modules/**'
    - '!.dynamodb/**'
    - '!.vscode/**'
    - '!deprecated/**'
    - '!layer/**'

layers:
  vwarsNodeModules:
    name: vwarsNodeModules-${self:provider.stage}
    path: layer

functions:
  vwars:
    handler: vwarsHandler.handle
    layers:
      - !Ref VwarsNodeModulesLambdaLayer
    events:
      - http:
          path: vwars
          method: post
  vwars-task-master:
    handler: vwarsTaskMasterHandler.handle
    layers:
      - !Ref VwarsNodeModulesLambdaLayer
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - vwarsTaskQueue
              - Arn

resources:
  Resources:
    vwarsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: "${self:custom.vwarsTableName}"
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
    vwarsTaskQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "${self:custom.vwarsTaskQueueName}"
        FifoQueue: true

custom:
  vwarsTableName: "vwars-${self:provider.stage}"
  vwarsTaskQueueName: "vwars-task-queue-${self:provider.stage}.fifo"
  dynamodb:
    stages:
      - local
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
      convertEmptyValues: true
    migration:
      dir: testResources/offlineMigrations  
    seed:
      vwarsSeed:
        sources:
          - table: "vwars-local"
            sources: [./testResources/offlineSeedData/vwars_seed.json]
  serverless-offline:
    sqs:
      host: ${env:LOCALSTACK_HOST, 'localhost'}
      port: 4576